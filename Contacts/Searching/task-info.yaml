type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |-
    package contacts;

    public class Main {

        public static void main(String[] args) {
            new Application(new PhoneBook()).run();
        }
    }
  learner_created: false
- name: src/contacts/Menu.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;
    import java.util.stream.Collectors;

    public class Menu {
        private String title;
        private final List<MenuItem> items = new ArrayList<>();

        private static class MenuItem {
            private final String title;
            private final Action action;

            private MenuItem(String title, Action action) {
                this.title = title;
                this.action = action;
            }

            private void execute() {
                action.execute();
            }
        }

        public Menu setTitle(String title) {
            this.title = title;
            return this;
        }

        public Menu addMenuItem(String title, Action action) {
            items.add(new MenuItem(title, action));
            return this;
        }

        public void execute(String itemName) {
            Optional<MenuItem> item = items.stream()
                    .filter(it -> it.title.equals(itemName))
                    .findFirst();

            item.ifPresent(MenuItem::execute);
        }

        @Override
        public String toString() {
            return title + " " +
                    items.stream()
                            .map(it -> it.title)
                            .collect(Collectors.joining(", ", "(", ")")) + ": ";
        }
    }
  learner_created: false
- name: src/contacts/Action.java
  visible: true
  text: |
    package contacts;

    public interface Action {
        void execute();
    }
  learner_created: false
- name: src/contacts/Application.java
  visible: true
  text: |
    package contacts;

    import java.util.List;
    import java.util.Scanner;

    public class Application {
        private static final Scanner scanner = new Scanner(System.in);

        private Menu mainMenu;
        private Menu editMenu;
        private final PhoneBook phoneBook;
        private int selectedRecordIndex;
        private boolean isRunning;

        public Application(PhoneBook phoneBook) {
            this.phoneBook = phoneBook;
            this.isRunning = true;
        }

        public void run() {
            buildMenu();

            while (isRunning) {
                System.out.print(mainMenu);
                String input = scanner.nextLine().toLowerCase().strip();
                mainMenu.execute(input);
            }
        }

        private void buildMenu() {
            mainMenu = new Menu().setTitle("Enter action")
                    .addMenuItem("add", this::addContact)
                    .addMenuItem("remove", this::removeContact)
                    .addMenuItem("edit", this::editContact)
                    .addMenuItem("count", this::getContactsCount)
                    .addMenuItem("list", this::listContacts)
                    .addMenuItem("exit", this::exit);

            editMenu = new Menu().setTitle("Select a field")
                    .addMenuItem("name", this::updateName)
                    .addMenuItem("surname", this::updateSurname)
                    .addMenuItem("number", this::updateNumber);

        }

        private void removeContact() {
            if (phoneBook.getRecordsCount() == 0) {
                System.out.println("No records to remove!");
                return;
            }

            readContactId();
            if (selectedRecordIndex == -1) {
                return;
            }

            if (phoneBook.removeContact(selectedRecordIndex)) {
                System.out.println("The record removed!");
            }
        }

        private void editContact() {
            if (phoneBook.getRecordsCount() == 0) {
                System.out.println("No records to edit!");
                return;
            }

            readContactId();
            if (selectedRecordIndex == -1) {
                return;
            }

            System.out.print(editMenu);
            String input = scanner.nextLine().toLowerCase().strip();
            editMenu.execute(input);
        }

        private void updateNumber() {
            System.out.print("Enter number: ");
            String newNumber = scanner.nextLine();
            if (PhoneBook.isNotValidNumber(newNumber)) {
                System.out.println("Wrong number format!");
                newNumber = "";
            }
            if (phoneBook.updatePhoneNumber(selectedRecordIndex, newNumber)) {
                System.out.println("The record updated!");
            }
        }

        private void updateSurname() {
            System.out.print("Enter surname: ");
            String newSurname = scanner.nextLine();
            if (phoneBook.updateLastName(selectedRecordIndex, newSurname)) {
                System.out.println("The record updated!");
            }
        }

        private void updateName() {
            System.out.print("Enter name: ");
            String newName = scanner.nextLine();
            if (phoneBook.updateFirstName(selectedRecordIndex, newName)) {
                System.out.println("The record updated!");
            }
        }

        private void readContactId() {
            if (phoneBook.getRecordsCount() == 0) {
                selectedRecordIndex = -1;
                return;
            }

            listContacts();
            System.out.print("Select a record: ");
            selectedRecordIndex = Integer.parseInt(scanner.nextLine()) - 1;
        }

        private void addContact() {
            System.out.print("Enter the name: ");
            String name = scanner.nextLine();
            System.out.print("Enter the surname: ");
            String surname = scanner.nextLine();
            System.out.print("Enter the number: ");
            String number = scanner.nextLine();

            if (PhoneBook.isNotValidNumber(number)) {
                number = "";
                System.out.println("Wrong number format!");
            }

            if (phoneBook.addContact(new Contact(name, surname, number))) {
                System.out.println("The record added.");
            }
        }

        private void listContacts() {
            List<String> list = phoneBook.getContactsList();
            if (list.isEmpty()) {
                System.out.println("No records to list!");
            } else {
                list.forEach(System.out::println);
            }
        }

        private void getContactsCount() {
            int count = phoneBook.getRecordsCount();
            System.out.println("The Phone Book has " + count + " records.");
        }

        private void exit() {
            isRunning = false;
        }
    }
  learner_created: false
- name: src/contacts/PhoneBook.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.List;

    public class PhoneBook {
        private static final String VALID_PHONE_NUMBER_FORMAT =
                "\\+?(\\([A-Za-z0-9]+\\)([\\s|-]?[A-Za-z0-9]{2,})?|[A-Za-z0-9]+[\\s|-]?(\\([A-Za-z0-9]{2,}\\))?)([\\s|-]?[A-Za-z0-9]{2,})*";
        private final List<Contact> contacts = new ArrayList<>();

        public static boolean isNotValidNumber(String number) {
            return !number.matches(VALID_PHONE_NUMBER_FORMAT);
        }

        public boolean addContact(Contact contact) {
            contacts.add(contact);
            return true;
        }

        public int getRecordsCount() {
            return contacts.size();
        }

        public List<String> getContactsList() {
            List<String> list = new ArrayList<>();
            for (int index = 0; index < contacts.size(); index++) {
                String item = index + 1 + "." + " " + contacts.get(index).toString();
                list.add(item);
            }

            return list;
        }

        public boolean removeContact(int index) {
            contacts.remove(index);
            return true;
        }

        public boolean updateFirstName(int index, String newName) {
            contacts.get(index).setFirstName(newName);
            return true;
        }

        public boolean updateLastName(int index, String newSurname) {
            contacts.get(index).setLastName(newSurname);
            return true;
        }

        public boolean updatePhoneNumber(int index, String newNumber) {
            contacts.get(index).setPhoneNumber(newNumber);
            return true;
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, int needSize) {\n        if (actualSize < needSize) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain at least\
    \ %d actions, but you have only %d. \" +\n                            \"You should\
    \ separate your actions with an empty line.\",\n                    needSize,\n\
    \                    actualSize));\n        } else {\n            return null;\n\
    \        }\n    }\n    \n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"Enter action\\\"\
    \ substring found in the output\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"0 records\")) {\n                        return new CheckResult(false,\n\
    \                            \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    }\n\
    \                }\n                return new CheckResult(false,\n          \
    \              \"Search by phone number is not working\");\n            }))\n\
    \        );\n    }\n\n    @Override\n    public CheckResult check(String reply,\
    \ TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Business.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;

    public class Business extends Record {
        private String address;

        private Business(String name,
                        String address,
                        String number,
                        LocalDateTime created) {

            super(name, number, created);
            this.name = name;
            this.address = address;
        }

        public String getAddress() {
            return getOrDefault(address);
        }

        public void setAddress(String address) {
            this.address = address;
            updateLastModified();
        }

        @Override
        public Boolean isPerson() {
            return false;
        }

        @Override
        public String toString() {
            return "Organization name: " + super.getName() + "\n" +
                    "Address: " + getAddress() + "\n" +
                    "Number: " + super.getNumber() + "\n" +
                    "Time created: " + super.getTimeCreatedAsString() + "\n" +
                    "Time last edit: " + super.getTimeLastModifiedAsString();
        }

        public static Business.Builder builder() {
            return new Builder();
        }

        static class Builder {
            private String name;
            private String address;
            private String number;
            private LocalDateTime created;

            public Builder setName(String name) {
                this.name = name;
                return this;
            }

            public Builder setAddress(String address) {
                this.address = address;
                return this;
            }

            public Builder setNumber(String number) {
                this.number = number;
                return this;
            }

            public Builder setCreated(LocalDateTime dateTime) {
                this.created = dateTime;
                return this;
            }

            public Business build() {
                return new Business(name, address, number, created);
            }
        }
    }
  learner_created: true
- name: src/contacts/Record.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;

    public class Record {
        protected static final String NO_DATA = "[no data]";

        protected String name;
        protected LocalDateTime created;
        protected LocalDateTime lastModified;
        protected String number;

        protected Record(String name, String number, LocalDateTime created) {
            this.name = name;
            this.created = created;
            this.lastModified = created;
            this.number = number;
        }

        public Boolean isPerson() {
            return null;
        }

        public void setName(String name) {
            this.name = name;
            updateLastModified();
        }

        public String getName() {
            return getOrDefault(name);
        }

        public String getNumber() {
            return getOrDefault(number);
        }

        public void setNumber(String number) {
            this.number = number;
            updateLastModified();
        }

        protected void updateLastModified() {
            lastModified = LocalDateTime.now();
        }

        public String getTimeCreatedAsString() {
            return created.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'hh:mm"));
        }

        public String getTimeLastModifiedAsString() {
            return lastModified.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'hh:mm"));
        }

        protected String getOrDefault(String field) {
            return field == null || field.isBlank() ? NO_DATA : field;
        }
    }
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDate;
    import java.time.LocalDateTime;

    public class Person extends Record {
        private String surname;
        private LocalDate birthDate;
        private String gender;

        private Person(String name,
                       String surname,
                       LocalDate birthDate,
                       String gender,
                       String number,
                       LocalDateTime created) {

            super(name, number, created);
            this.name = name;
            this.surname = surname;
            this.birthDate = birthDate;
            this.gender = gender;
        }

        public String getSurname() {
            return getOrDefault(surname);
        }

        public void setSurname(String surname) {
            this.surname = surname;
            updateLastModified();
        }

        public void setBirthDate(LocalDate birthDate) {
            this.birthDate = birthDate;
            updateLastModified();
        }

        public String getGender() {
            return getOrDefault(gender);
        }

        public void setGender(String gender) {
            this.gender = gender;
            updateLastModified();
        }

        @Override
        public String getName() {
            return name + " " + surname;
        }

        @Override
        public Boolean isPerson() {
            return true;
        }

        @Override
        public String toString() {
            return "Name: " + super.getName() + "\n" +
                    "Surname: " + getSurname() + '\n' +
                    "Birth date: " + getBirthDateAsString() + "\n" +
                    "Gender: " + getGender() + '\n' +
                    "Number: " + super.getNumber() + "\n" +
                    "Time created: " + super.getTimeCreatedAsString() + "\n" +
                    "Time last edit: " + super.getTimeLastModifiedAsString();
        }

        public String getBirthDateAsString() {
            return this.birthDate == null ? "[no data]" : this.birthDate.toString();
        }

        public static Person.Builder builder() {
            return new Builder();
        }

        public static class Builder {
            private String name;
            private String surname;
            private LocalDate birthDate;
            private String gender;
            private String number;
            private LocalDateTime created;

            public Builder setName(String name) {
                this.name = name;
                return this;
            }

            public Builder setSurname(String surname) {
                this.surname = surname;
                return this;
            }

            public Builder setBirthDate(LocalDate date) {
                this.birthDate = date;
                return this;
            }

            public Builder setGender(String gender) {
                this.gender = gender;
                return this;
            }

            public Builder setNumber(String number) {
                this.number = number;
                return this;
            }

            public Builder setCreated(LocalDateTime dateTime) {
                this.created = dateTime;
                return this;
            }

            public Person build() {
                return new Person(name, surname, birthDate, gender, number, created);
            }
        }

    }
  learner_created: true
- name: src/contacts/EditableRecord.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement#comment
status: Unchecked
record: -1
