type: edu
custom_name: stage3
files:
- name: src/contacts/Main.java
  visible: true
  text: |-
    package contacts;

    public class Main {

        public static void main(String[] args) {
            new Application(new PhoneBook()).run();
        }
    }
  learner_created: false
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    public class Contact {
        private static final String NO_NUMBER = "[no number]";

        private String firstName;
        private String lastName;
        private String phoneNumber;

        public Contact(String firstName, String lastName, String phoneNumber) {
            this.firstName = firstName;
            this.lastName = lastName;
            if (phoneNumber.isEmpty()) {
                this.phoneNumber = NO_NUMBER;
            } else {
                this.phoneNumber = phoneNumber;
            }
        }

        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }

        public void setLastName(String lastName) {
            this.lastName = lastName;
        }

        public void setPhoneNumber(String phoneNumber) {
            if (phoneNumber.isEmpty()) {
                this.phoneNumber = NO_NUMBER;
            } else {
                this.phoneNumber = phoneNumber;
            }
        }

        @Override
        public String toString() {
            return firstName + " " + lastName + ", " + phoneNumber;
        }
    }
  learner_created: false
- name: src/contacts/Menu.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;
    import java.util.stream.Collectors;

    public class Menu {
        private String title;
        private final List<MenuItem> items = new ArrayList<>();

        private static class MenuItem {
            private final String title;
            private final Action action;

            private MenuItem(String title, Action action) {
                this.title = title;
                this.action = action;
            }

            private void execute() {
                action.execute();
            }
        }

        public Menu setTitle(String title) {
            this.title = title;
            return this;
        }

        public Menu addMenuItem(String title, Action action) {
            items.add(new MenuItem(title, action));
            return this;
        }

        public void execute(String itemName) {
            Optional<MenuItem> item = items.stream()
                    .filter(it -> it.title.equals(itemName))
                    .findFirst();

            item.ifPresent(MenuItem::execute);
        }

        @Override
        public String toString() {
            return title + " " +
                    items.stream()
                            .map(it -> it.title)
                            .collect(Collectors.joining(", ", "(", ")")) + ": ";
        }
    }
  learner_created: false
- name: src/contacts/Action.java
  visible: true
  text: |
    package contacts;

    public interface Action {
        void execute();
    }
  learner_created: false
- name: src/contacts/Application.java
  visible: true
  text: |
    package contacts;

    import java.util.List;
    import java.util.Scanner;

    public class Application {
        private static final Scanner scanner = new Scanner(System.in);

        private Menu mainMenu;
        private Menu editMenu;
        private final PhoneBook phoneBook;
        private int selectedRecordIndex;
        private boolean isRunning;

        public Application(PhoneBook phoneBook) {
            this.phoneBook = phoneBook;
            this.isRunning = true;
        }

        public void run() {
            buildMenu();

            while (isRunning) {
                System.out.print(mainMenu);
                String input = scanner.nextLine().toLowerCase().strip();
                mainMenu.execute(input);
            }
        }

        private void buildMenu() {
            mainMenu = new Menu().setTitle("Enter action")
                    .addMenuItem("add", this::addContact)
                    .addMenuItem("remove", this::removeContact)
                    .addMenuItem("edit", this::editContact)
                    .addMenuItem("count", this::getContactsCount)
                    .addMenuItem("list", this::listContacts)
                    .addMenuItem("exit", this::exit);

            editMenu = new Menu().setTitle("Select a field")
                    .addMenuItem("name", this::updateName)
                    .addMenuItem("surname", this::updateSurname)
                    .addMenuItem("number", this::updateNumber);

        }

        private void removeContact() {
            if (phoneBook.getRecordsCount() == 0) {
                System.out.println("No records to remove!");
                return;
            }

            readContactId();
            if (selectedRecordIndex == -1) {
                return;
            }

            if (phoneBook.removeContact(selectedRecordIndex)) {
                System.out.println("The record removed!");
            }
        }

        private void editContact() {
            if (phoneBook.getRecordsCount() == 0) {
                System.out.println("No records to edit!");
                return;
            }

            readContactId();
            if (selectedRecordIndex == -1) {
                return;
            }

            System.out.print(editMenu);
            String input = scanner.nextLine().toLowerCase().strip();
            editMenu.execute(input);
        }

        private void updateNumber() {
            System.out.print("Enter number: ");
            String newNumber = scanner.nextLine();
            if (PhoneBook.isNotValidNumber(newNumber)) {
                System.out.println("Wrong number format!");
                newNumber = "";
            }
            if (phoneBook.updatePhoneNumber(selectedRecordIndex, newNumber)) {
                System.out.println("The record updated!");
            }
        }

        private void updateSurname() {
            System.out.print("Enter surname: ");
            String newSurname = scanner.nextLine();
            if (phoneBook.updateLastName(selectedRecordIndex, newSurname)) {
                System.out.println("The record updated!");
            }
        }

        private void updateName() {
            System.out.print("Enter name: ");
            String newName = scanner.nextLine();
            if (phoneBook.updateFirstName(selectedRecordIndex, newName)) {
                System.out.println("The record updated!");
            }
        }

        private void readContactId() {
            if (phoneBook.getRecordsCount() == 0) {
                selectedRecordIndex = -1;
                return;
            }

            listContacts();
            System.out.print("Select a record: ");
            selectedRecordIndex = Integer.parseInt(scanner.nextLine()) - 1;
        }

        private void addContact() {
            System.out.print("Enter the name: ");
            String name = scanner.nextLine();
            System.out.print("Enter the surname: ");
            String surname = scanner.nextLine();
            System.out.print("Enter the number: ");
            String number = scanner.nextLine();

            if (PhoneBook.isNotValidNumber(number)) {
                number = "";
                System.out.println("Wrong number format!");
            }

            if (phoneBook.addContact(new Contact(name, surname, number))) {
                System.out.println("The record added.");
            }
        }

        private void listContacts() {
            List<String> list = phoneBook.getContactsList();
            if (list.isEmpty()) {
                System.out.println("No records to list!");
            } else {
                list.forEach(System.out::println);
            }
        }

        private void getContactsCount() {
            int count = phoneBook.getRecordsCount();
            System.out.println("The Phone Book has " + count + " records.");
        }

        private void exit() {
            isRunning = false;
        }
    }
  learner_created: false
- name: src/contacts/PhoneBook.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.List;

    public class PhoneBook {
        private static final String VALID_PHONE_NUMBER_FORMAT =
                "\\+?(\\([A-Za-z0-9]+\\)([\\s|-]?[A-Za-z0-9]{2,})?|[A-Za-z0-9]+[\\s|-]?(\\([A-Za-z0-9]{2,}\\))?)([\\s|-]?[A-Za-z0-9]{2,})*";
        private final List<Contact> contacts = new ArrayList<>();

        public static boolean isNotValidNumber(String number) {
            return !number.matches(VALID_PHONE_NUMBER_FORMAT);
        }

        public boolean addContact(Contact contact) {
            contacts.add(contact);
            return true;
        }

        public int getRecordsCount() {
            return contacts.size();
        }

        public List<String> getContactsList() {
            List<String> list = new ArrayList<>();
            for (int index = 0; index < contacts.size(); index++) {
                String item = index + 1 + "." + " " + contacts.get(index).toString();
                list.add(item);
            }

            return list;
        }

        public boolean removeContact(int index) {
            contacts.remove(index);
            return true;
        }

        public boolean updateFirstName(int index, String newName) {
            contacts.get(index).setFirstName(newName);
            return true;
        }

        public boolean updateLastName(int index, String newSurname) {
            contacts.get(index).setLastName(newSurname);
            return true;
        }

        public boolean updatePhoneNumber(int index, String newNumber) {
            contacts.get(index).setPhoneNumber(newNumber);
            return true;
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, String... actions) {\n        if (actualSize != actions.length)\
    \ {\n            return CheckResult.wrong(String.format(\"This test should contain\
    \ %d actions: %s. \" +\n                            \"You should separate your\
    \ actions with an empty line.\",\n                    actions.length,\n      \
    \              String.join(\", \", actions)));\n        } else {\n           \
    \ return null;\n        }\n    }\n\n    @Override\n    public List<TestCase<TestClue>>\
    \ generate() {\n        return List.of (\n            new TestCase<TestClue>()\n\
    \                .setInput(\"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (!output.contains(\"enter action\")) {\n                      \
    \  return new CheckResult(false,\n                            \"No \\\"Enter action\\\
    \" substring found in the output\");\n                    }\n                \
    \    return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"0 records\")) {\n                        return new CheckResult(false,\n\
    \                            \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"edit\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (!output.contains(\"no records to edit\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    No records to edit\\\" substring found in the output\");\n                   \
    \ }\n                    return CheckResult.correct();\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"count\\n\" +\n                    \"remove\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"no records to remove\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"No records to remove\\\
    \" substring found in the output\");\n                    }\n                \
    \    return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"info\\n\"\
    \ +\n                        \"1\\n\" +\n                    \"exit\")\n     \
    \           .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, \"add\", \"info\", \"\
    exit\");\n                    if (feedback != null) return feedback;\n       \
    \             \n                    String infoBlock = blocks[1];\n          \
    \          if (!infoBlock.contains(\"Name: John\")\n                        ||\
    \ !infoBlock.contains(\"Surname: Smith\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Something wrong with printing user info\");\n                    }\n   \
    \                 return CheckResult.correct();\n                })),\n\n    \
    \        new TestCase<TestClue>()\n                .setInput(\n              \
    \      \"add\\n\" +\n                        \"organization\\n\" +\n         \
    \               \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"info\", \"exit\");\n                    if (feedback != null) return feedback;\n\
    \                    \n                    String infoBlock = blocks[1];\n   \
    \                 if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n\
    \                        || !infoBlock.contains(\"Address: Wall St. 1\")\n   \
    \                     || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Something\
    \ wrong with printing organization info\");\n                    }\n         \
    \           return CheckResult.correct();\n                })),\n\n          \
    \  new TestCase<TestClue>()\n                .setInput(\n                    \"\
    add\\n\" +\n                        \"person\\n\" +\n                        \"\
    John\\n\" +\n                        \"Smith\\n\" +\n                        \"\
    \\n\" +\n                        \"\\n\" +\n                        \"123 456\
    \ 789\\n\" +\n                    \"edit\\n\" +\n                        \"1\\\
    n\" +\n                        \"gender\\n\" +\n                        \"M\\\
    n\" +\n                    \"info\\n\" +\n                        \"1\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith\")\n        \
    \                || !infoBlock.contains(\"Birth date: [no data]\")\n         \
    \               || !infoBlock.contains(\"Gender: M\")\n                      \
    \  || !infoBlock.contains(\"Number: 123 456 789\")\n                        ||\
    \ !infoBlock.contains(\"Time created:\")\n                        || !infoBlock.contains(\"\
    Time last edit:\")) {\n                        return new CheckResult(false,\n\
    \                            \"Editing person gender is not working\");\n    \
    \                }\n                    return CheckResult.correct();\n      \
    \          })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"person\\n\" +\n \
    \                       \"John2\\n\" +\n                        \"Smith2\\n\"\
    \ +\n                        \"\\n\" +\n                        \"\\n\" +\n  \
    \                      \"123 456 789\\n\" +\n                    \"edit\\n\" +\n\
    \                        \"1\\n\" +\n                        \"name\\n\" +\n \
    \                       \"John3\\n\" +\n                    \"info\\n\" +\n  \
    \                      \"1\\n\" +\n                    \"exit\")\n           \
    \     .setAttach(new TestClue(output -> {\n                    String[] blocks\
    \ = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n                    var\
    \ feedback = splitActionsFeedback(blocks.length, \"add\", \"edit\", \"info\",\
    \ \"exit\");\n                    if (feedback != null) return feedback;\n   \
    \                 \n                    String infoBlock = blocks[2];\n      \
    \              if (!infoBlock.contains(\"Name: John3\")\n                    \
    \    || !infoBlock.contains(\"Surname: Smith2\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Editing person name is not working\");\n                    }\n        \
    \            return CheckResult.correct();\n                })),\n\n         \
    \   new TestCase<TestClue>()\n                .setInput(\n                   \
    \ \"add\\n\" +\n                        \"person\\n\" +\n                    \
    \    \"John2\\n\" +\n                        \"Smith2\\n\" +\n               \
    \         \"\\n\" +\n                        \"\\n\" +\n                     \
    \   \"123 456 789\\n\" +\n                    \"edit\\n\" +\n                \
    \        \"1\\n\" +\n                        \"number\\n\" +\n               \
    \         \"321 654 978\\n\" +\n                    \"info\\n\" +\n          \
    \              \"1\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John2\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith2\")\n       \
    \                 || !infoBlock.contains(\"Birth date: [no data]\")\n        \
    \                || !infoBlock.contains(\"Gender: [no data]\")\n             \
    \           || !infoBlock.contains(\"Number: 321 654 978\")\n                \
    \        || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person number\
    \ is not working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"edit\\n\" +\n                        \"1\\n\" +\n       \
    \                 \"address\\n\" +\n                        \"Wall St 2\\n\" +\n\
    \                    \"info\\n\" +\n                        \"1\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Organization name:\
    \ Pizza Shop\")\n                        || !infoBlock.contains(\"Address: Wall\
    \ St 2\")\n                        || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization address is not working\");\n                    }\n           \
    \         return CheckResult.correct();\n                })),\n\n            new\
    \ TestCase<TestClue>()\n                .setInput(\n                    \"add\\\
    n\" +\n                        \"organization\\n\" +\n                       \
    \ \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n         \
    \               \"+0 (123) 456-789-9999\\n\" +\n                    \"edit\\n\"\
    \ +\n                        \"1\\n\" +\n                        \"number\\n\"\
    \ +\n                        \"+0 (123) 456-789-12345\\n\" +\n               \
    \     \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"edit\", \"info\", \"exit\");\n                    if (feedback != null) return\
    \ feedback;\n                    \n                    String infoBlock = blocks[2];\n\
    \                    if (!infoBlock.contains(\"Organization name: Pizza Shop\"\
    )\n                        || !infoBlock.contains(\"Address: Wall St. 1\")\n \
    \                       || !infoBlock.contains(\"Number: +0 (123) 456-789-12345\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization number is not working\");\n                    }\n            \
    \        return CheckResult.correct();\n                }))\n        );\n    }\n\
    \n    @Override\n    public CheckResult check(String reply, TestClue clue) {\n\
    \        try {\n            return clue.callback.apply(reply);\n        }\n  \
    \      catch (Exception ex) {\n            return new CheckResult(false, \"Can't\
    \ check the answer\");\n        }\n    }\n}\n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/43/stages/230/implement#comment
status: Unchecked
record: 3
